
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ATTR_CLASS ATTR_DESCRIPTION ATTR_NAME ATTR_RANK ATTR_VALUE CLASS CONTAINS ENDS_WITH EQUAL EQ_GREATER EQ_LESSER GREATER HAS HAS_NOT J_AND J_EQUALS J_IMPLIES J_N_EQUALS J_OR LESSER LPAREN NUMBER N_EQUAL RANK RPAREN STARTS_WITH STRINGstatement : expression join statementstatement : LPAREN statement RPARENstatement : expressionexpression : exist_comp attributeexpression : ATTR_CLASS equal_comp CLASSexpression : ATTR_RANK num_comp RANKexpression : num_attribute num_comp NUMBERexpression : str_attribute str_comp STRINGattribute : num_attribute\n                 | str_attribute\n                 | enum_attributeenum_attribute : ATTR_CLASSenum_attribute : ATTR_RANKnum_attribute : ATTR_VALUEstr_attribute : ATTR_NAMEstr_attribute : ATTR_DESCRIPTIONequal_comp : EQUALequal_comp : N_EQUALnum_comp : equal_compnum_comp : LESSERnum_comp : GREATERnum_comp : EQ_GREATERnum_comp : EQ_LESSERstr_comp : STARTS_WITHstr_comp : ENDS_WITHstr_comp : CONTAINSexist_comp : HASexist_comp : HAS_NOTjoin : J_ANDjoin : J_ORjoin : J_N_EQUALSjoin : J_IMPLIESjoin : J_EQUALS'
    
_lr_action_items = {'LPAREN':([0,3,14,15,16,17,18,19,],[3,3,3,-29,-30,-31,-32,-33,]),'ATTR_CLASS':([0,3,4,9,10,14,15,16,17,18,19,],[5,5,25,-27,-28,5,-29,-30,-31,-32,-33,]),'ATTR_RANK':([0,3,4,9,10,14,15,16,17,18,19,],[6,6,26,-27,-28,6,-29,-30,-31,-32,-33,]),'HAS':([0,3,14,15,16,17,18,19,],[9,9,9,-29,-30,-31,-32,-33,]),'HAS_NOT':([0,3,14,15,16,17,18,19,],[10,10,10,-29,-30,-31,-32,-33,]),'ATTR_VALUE':([0,3,4,9,10,14,15,16,17,18,19,],[11,11,11,-27,-28,11,-29,-30,-31,-32,-33,]),'ATTR_NAME':([0,3,4,9,10,14,15,16,17,18,19,],[12,12,12,-27,-28,12,-29,-30,-31,-32,-33,]),'ATTR_DESCRIPTION':([0,3,4,9,10,14,15,16,17,18,19,],[13,13,13,-27,-28,13,-29,-30,-31,-32,-33,]),'$end':([1,2,11,12,13,21,22,23,24,25,26,41,42,43,44,45,46,],[0,-3,-14,-15,-16,-4,-9,-10,-11,-12,-13,-1,-2,-5,-6,-7,-8,]),'RPAREN':([2,11,12,13,20,21,22,23,24,25,26,41,42,43,44,45,46,],[-3,-14,-15,-16,42,-4,-9,-10,-11,-12,-13,-1,-2,-5,-6,-7,-8,]),'J_AND':([2,11,12,13,21,22,23,24,25,26,43,44,45,46,],[15,-14,-15,-16,-4,-9,-10,-11,-12,-13,-5,-6,-7,-8,]),'J_OR':([2,11,12,13,21,22,23,24,25,26,43,44,45,46,],[16,-14,-15,-16,-4,-9,-10,-11,-12,-13,-5,-6,-7,-8,]),'J_N_EQUALS':([2,11,12,13,21,22,23,24,25,26,43,44,45,46,],[17,-14,-15,-16,-4,-9,-10,-11,-12,-13,-5,-6,-7,-8,]),'J_IMPLIES':([2,11,12,13,21,22,23,24,25,26,43,44,45,46,],[18,-14,-15,-16,-4,-9,-10,-11,-12,-13,-5,-6,-7,-8,]),'J_EQUALS':([2,11,12,13,21,22,23,24,25,26,43,44,45,46,],[19,-14,-15,-16,-4,-9,-10,-11,-12,-13,-5,-6,-7,-8,]),'EQUAL':([5,6,7,11,],[28,28,28,-14,]),'N_EQUAL':([5,6,7,11,],[29,29,29,-14,]),'LESSER':([6,7,11,],[32,32,-14,]),'GREATER':([6,7,11,],[33,33,-14,]),'EQ_GREATER':([6,7,11,],[34,34,-14,]),'EQ_LESSER':([6,7,11,],[35,35,-14,]),'STARTS_WITH':([8,12,13,],[38,-15,-16,]),'ENDS_WITH':([8,12,13,],[39,-15,-16,]),'CONTAINS':([8,12,13,],[40,-15,-16,]),'CLASS':([27,28,29,],[43,-17,-18,]),'RANK':([28,29,30,31,32,33,34,35,],[-17,-18,44,-19,-20,-21,-22,-23,]),'NUMBER':([28,29,31,32,33,34,35,36,],[-17,-18,-19,-20,-21,-22,-23,45,]),'STRING':([37,38,39,40,],[46,-24,-25,-26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,3,14,],[1,20,41,]),'expression':([0,3,14,],[2,2,2,]),'exist_comp':([0,3,14,],[4,4,4,]),'num_attribute':([0,3,4,14,],[7,7,22,7,]),'str_attribute':([0,3,4,14,],[8,8,23,8,]),'join':([2,],[14,]),'attribute':([4,],[21,]),'enum_attribute':([4,],[24,]),'equal_comp':([5,6,7,],[27,31,31,]),'num_comp':([6,7,],[30,36,]),'str_comp':([8,],[37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression join statement','statement',3,'p_statement','Refila.py',254),
  ('statement -> LPAREN statement RPAREN','statement',3,'p_statement_group','Refila.py',258),
  ('statement -> expression','statement',1,'p_statement_expr','Refila.py',262),
  ('expression -> exist_comp attribute','expression',2,'p_expression_exists','Refila.py',266),
  ('expression -> ATTR_CLASS equal_comp CLASS','expression',3,'p_expression_attrclass_class','Refila.py',270),
  ('expression -> ATTR_RANK num_comp RANK','expression',3,'p_expression_attrrank_rank','Refila.py',274),
  ('expression -> num_attribute num_comp NUMBER','expression',3,'p_expression_num_attr','Refila.py',278),
  ('expression -> str_attribute str_comp STRING','expression',3,'p_expression_str_attr','Refila.py',282),
  ('attribute -> num_attribute','attribute',1,'p_attribute','Refila.py',287),
  ('attribute -> str_attribute','attribute',1,'p_attribute','Refila.py',288),
  ('attribute -> enum_attribute','attribute',1,'p_attribute','Refila.py',289),
  ('enum_attribute -> ATTR_CLASS','enum_attribute',1,'p_attribute_class','Refila.py',294),
  ('enum_attribute -> ATTR_RANK','enum_attribute',1,'p_attribute_rank','Refila.py',298),
  ('num_attribute -> ATTR_VALUE','num_attribute',1,'p_attribute_value','Refila.py',303),
  ('str_attribute -> ATTR_NAME','str_attribute',1,'p_attribute_name','Refila.py',308),
  ('str_attribute -> ATTR_DESCRIPTION','str_attribute',1,'p_attribute_des','Refila.py',312),
  ('equal_comp -> EQUAL','equal_comp',1,'p_equal_comp_equal','Refila.py',317),
  ('equal_comp -> N_EQUAL','equal_comp',1,'p_equal_comp_n_equal','Refila.py',321),
  ('num_comp -> equal_comp','num_comp',1,'p_comp_equals','Refila.py',326),
  ('num_comp -> LESSER','num_comp',1,'p_comp_lesser','Refila.py',330),
  ('num_comp -> GREATER','num_comp',1,'p_comp_greater','Refila.py',334),
  ('num_comp -> EQ_GREATER','num_comp',1,'p_comp_eq_greater','Refila.py',338),
  ('num_comp -> EQ_LESSER','num_comp',1,'p_comp_eq_lesser','Refila.py',342),
  ('str_comp -> STARTS_WITH','str_comp',1,'p_comp_starts_with','Refila.py',347),
  ('str_comp -> ENDS_WITH','str_comp',1,'p_comp_ends_with','Refila.py',351),
  ('str_comp -> CONTAINS','str_comp',1,'p_comp_contains','Refila.py',355),
  ('exist_comp -> HAS','exist_comp',1,'p_exists_has','Refila.py',360),
  ('exist_comp -> HAS_NOT','exist_comp',1,'p_exists_has_not','Refila.py',364),
  ('join -> J_AND','join',1,'p_join_and','Refila.py',369),
  ('join -> J_OR','join',1,'p_join_or','Refila.py',373),
  ('join -> J_N_EQUALS','join',1,'p_join_xor','Refila.py',377),
  ('join -> J_IMPLIES','join',1,'p_join_implies','Refila.py',381),
  ('join -> J_EQUALS','join',1,'p_join_equals','Refila.py',385),
]
